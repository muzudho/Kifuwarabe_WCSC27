using Grayscale.A060_Application.B520_Syugoron___.C___250_Struct;
using Grayscale.A060_Application.B520_Syugoron___.C250____Struct;
using Grayscale.A210_KnowNingen_.B170_WordShogi__.C250____Masu;
using Grayscale.A210_KnowNingen_.B170_WordShogi__.C500____Word;
using Grayscale.A210_KnowNingen_.B180_ConvPside__.C500____Converter;
using Grayscale.A210_KnowNingen_.B200_ConvMasu___.C500____Conv;
using System.Collections.Generic;
using Grayscale.A210_KnowNingen_.B180_ConvPside__.C500____Converter;

namespace Grayscale.A210_KnowNingen_.B210_KomanoKidou.C500____Struct
{

    /// <summary>
    /// ************************************************************************************************************************
    /// 駒の軌道を、ここに書きます。
    /// ************************************************************************************************************************
    /// 
    /// TODO: 一歩分のマスは、コレクションではなく、単体で返してはダメなのかなんだぜ☆？
    /// 
    /// </summary>
    public abstract class KomanoKidou
    {

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通上がるの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_上(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻上(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通左上がるの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_昇(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻昇(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通左寄りの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_射(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻射(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通左引きの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_沈(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻沈(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通引くの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_引(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻引(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通右引くの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_降(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻降(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通右寄りの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_滑(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻滑(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通右上がるの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstKantu_浮(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKantu_戻浮(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩上がるの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_上(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻上(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩左上がるの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_昇(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻昇(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩左寄りの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_射(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻射(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩左引きの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_沈(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻沈(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩引くの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_引(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻引(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩右引くの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_降(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻降(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩右寄りの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_滑(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻滑(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 一歩右上がるの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_ji">(自)</param>
        /// <returns></returns>
        public static SySet<SyElement> DstIppo_浮(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcIppo_戻浮(pside, masu_ji);
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 左桂馬飛びの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> DstKeimatobi_駆(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKeimatobi_戻跳(Conv_Playerside.Reverse(pside), masu_ji);
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// 右桂馬飛びの先の場所
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> DstKeimatobi_跳(Playerside pside, SyElement masu_ji)
        {
            return KomanoKidou.SrcKeimatobi_戻駆(Conv_Playerside.Reverse(pside), masu_ji);
        }



        /// <summary>
        /// ************************************************************************************************************************
        /// 先後を指定することで、打てる枡　全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> Dst_歩打面(Playerside pside)
        {
            SySet_Default<SyElement> dst = new SySet_Default<SyElement>("歩打面の移動先");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│  │  │  │  │  │  │  │  │  │
                //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

                for (int suji = 9; suji >= 1; suji--)
                {
                    for (int dan = 8; dan >= 1; dan--)
                    {
                        SyElement masu = Conv_Masu.ToMasu_FromBanjoSujiDan( suji, dan);
                        dst.AddElement(masu);
                    }
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
                //　│  │  │  │  │  │  │  │  │  │
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

                for (int suji = 1; suji <= 9; suji++)
                {
                    for (int dan = 2; dan <= 9; dan++)
                    {
                        SyElement masu = Conv_Masu.ToMasu_FromBanjoSujiDan( suji, dan);
                        dst.AddElement(masu);
                    }
                }
            }

            return dst;
        }



        /// <summary>
        /// ************************************************************************************************************************
        /// 先後を指定することで、打てる枡　全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> Dst_桂打面(Playerside pside)
        {
            SySet_Default<SyElement> dst = new SySet_Default<SyElement>("桂打面の移動先");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│  │  │  │  │  │  │  │  │  │
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│  │  │  │  │  │  │  │  │  │
                //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

                for (int suji = 9; suji >= 1; suji--)
                {
                    for (int dan = 7; dan >= 1; dan--)
                    {
                        SyElement masu = Conv_Masu.ToMasu_FromBanjoSujiDan( suji, dan);
                        dst.AddElement(masu);
                    }
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
                //　│  │  │  │  │  │  │  │  │  │
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│  │  │  │  │  │  │  │  │  │
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
                //　│至│至│至│至│至│至│至│至│至│
                //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

                for (int suji = 1; suji <= 9; suji++)
                {
                    for (int dan = 3; dan <= 9; dan++)
                    {
                        SyElement masu = Conv_Masu.ToMasu_FromBanjoSujiDan( suji, dan);
                        dst.AddElement(masu);
                    }
                }
            }

            return dst;
        }

        /// <summary>
        /// ************************************************************************************************************************
        /// 先後を指定することで、打てる枡　全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> Dst_全打面(Playerside pside)
        {
            SySet_Default<SyElement> dst = new SySet_Default<SyElement>("全打面の移動先");

            //******************************
            // △後手
            //******************************
            //******************************
            // ▲先手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│至│至│至│至│至│至│至│至│
            //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

            if (Playerside.P2 == pside)
            {
                for (int suji = 9; suji >= 1; suji-- )
                {
                    for (int dan = 9; dan >= 1; dan--)
                    {
                        SyElement masu = Conv_Masu.ToMasu_FromBanjoSujiDan( suji, dan);
                        dst.AddElement(masu);
                    }
                }
            }
            else
            {
                for (int suji = 1; suji <=9; suji++)
                {
                    for (int dan = 1; dan <= 9; dan++)
                    {
                        SyElement masu = Conv_Masu.ToMasu_FromBanjoSujiDan( suji, dan);
                        dst.AddElement(masu);
                    }
                }
            }

            return dst;
        }







        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通引きの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、飛車の(自)升の候補（Ａ方向）全てを返します。
        /// 
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻上(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcA;

            //******************************
            // △後手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │至│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A0│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A1│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A2│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │A3│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A4│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A5│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A6│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A7│  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘
            //　                  Ａ

            //******************************
            // ▲先手
            //******************************
            //　                  Ａ
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │A7│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A6│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A5│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A4│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │A3│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A2│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A1│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │A0│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │至│  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.上);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcA = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.上, 8);
            }
            else
            {
                srcA = new SySet_Default<SyElement>("戻上の移動元");
            }

            return srcA;
        }




        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通右引きの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、角の(自)升の候補（Ｂ方向）全てを返します。
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻昇(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcB;

            //******************************
            // △後手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //　│  │  │  │  │  │  │  │  │至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │B0│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │B1│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │B2│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │B3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │B4│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │B5│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │B6│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│B7│  │  │  │  │  │  │  │  │
            //Ｂ└─┴─┴─┴─┴─┴─┴─┴─┴─┘

            //******************************
            // ▲先手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐Ｂ
            //　│  │  │  │  │  │  │  │  │B7│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │B6│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │B5│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │B4│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │B3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │B2│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │B1│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │B0│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│  │  │  │  │  │  │  │  │
            //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.昇);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcB = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.昇, 8);
            }
            else
            {
                srcB = new SySet_Default<SyElement>("戻昇の移動元");
            }

            return srcB;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通右寄りの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、飛車の(自)升の候補（Ｃ方向）全てを返します。
        ///         
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻射(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcC;

            //******************************
            // △後手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //Ｃ│C7│C6│C5│C4│C3│C2│C1│C0│至│
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘

            //******************************
            // ▲先手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│G0│G1│G2│G3│G4│G5│G6│G7│Ｃ
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.射);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcC = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.射, 8);
            }
            else
            {
                srcC = new SySet_Default<SyElement>("戻射の移動元");
            }

            return srcC;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通右上がるの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、角の(自)升の候補（Ｄ方向）全てを返します。
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻沈(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcD;

            //******************************
            // △後手
            //******************************
            //Ｄ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //　│D7│  │  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │D6│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │D5│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │D4│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │D3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │D2│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │D1│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │D0│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │  │至│
            //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

            //******************************
            // ▲先手
            //******************************
            //　┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //　│至│  │  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │D0│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │D1│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │D2│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │D3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │D4│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │D5│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │D6│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │  │D7│
            //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘Ｄ

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.沈);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcD = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.沈, 8);
            }
            else
            {
                srcD = new SySet_Default<SyElement>("戻沈の移動元");
            }

            return srcD;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通上がるの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、飛車の(自)升の候補（Ｅ方向）全てを返します。
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻引(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcE;

            //******************************
            // △後手
            //******************************
            //　                  Ｅ
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │E7│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E6│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E5│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E4│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │E3│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E2│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E1│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E0│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │至│  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘

            //******************************
            // ▲先手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │至│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E0│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E1│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E2│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │E3│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E4│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E5│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E6│  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │E7│  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘
            //　                  Ｅ

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.引);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcE = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.引, 8);
            }
            else
            {
                srcE = new SySet_Default<SyElement>("戻引の移動元");
            }

            return srcE;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通左上がるの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、角の(自)升の候補（Ｆ方向）全てを返します。
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻降(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcF;

            //******************************
            // △後手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐Ｆ
            //　│  │  │  │  │  │  │  │  │F7│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │F6│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │F5│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │F4│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │F3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │F2│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │F1│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │F0│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│  │  │  │  │  │  │  │  │
            //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

            //******************************
            // ▲先手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //　│  │  │  │  │  │  │  │  │至│
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │F0│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │F1│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │F2│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │F3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │F4│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │F5│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │F6│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│F7│  │  │  │  │  │  │  │  │
            //Ｆ└─┴─┴─┴─┴─┴─┴─┴─┴─┘

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.降);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcF = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.降, 8);
            }
            else
            {
                srcF = new SySet_Default<SyElement>("戻降の移動元");
            }

            return srcF;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通左寄りの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、飛車の(自)升の候補（Ｇ方向）全てを返します。
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻滑(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcG;

            //******************************
            // △後手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│至│G0│G1│G2│G3│G4│G5│G6│G7│Ｇ
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘

            //******************************
            // ▲先手
            //******************************
            //  ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //Ｇ│G7│G6│G5│G4│G3│G2│G1│G0│至│
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  ├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //  │  │  │  │  │  │  │  │  │  │
            //  └─┴─┴─┴─┴─┴─┴─┴─┴─┘

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.滑);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcG = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.滑, 8);
            }
            else
            {
                srcG = new SySet_Default<SyElement>("戻滑の移動元");
            }

            return srcG;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// 貫通左引くの元の場所
        /// ************************************************************************************************************************
        /// 
        ///         (至)升を指定することで、角の(自)升の候補（Ｈ方向）全てを返します。
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKantu_戻浮(Playerside pside, SyElement masu_itaru)
        {
            SySet<SyElement> srcH;

            //******************************
            // △後手
            //******************************
            //　┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //　│至│  │  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │H0│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │H1│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │H2│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │H3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │H4│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │H5│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │H6│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │  │H7│
            //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘Ｈ

            //******************************
            // ▲先手
            //******************************
            //Ｈ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐
            //　│H7│  │  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │H6│  │  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │H5│  │  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │H4│  │  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │H3│  │  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │H2│  │  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │H1│  │  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │H0│  │
            //　├─┼─┼─┼─┼─┼─┼─┼─┼─┤
            //　│  │  │  │  │  │  │  │  │至│
            //　└─┴─┴─┴─┴─┴─┴─┴─┴─┘

            SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.浮);
            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
            {
                srcH = KomanoKidou.Create_Masus_DirectedSegment(masu, pside, Hogaku.浮, 8);
            }
            else
            {
                srcH = new SySet_Default<SyElement>("戻浮の移動元");
            }

            return srcH;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ａ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻上(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcA = new SySet_Default<SyElement>("戻上の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //┌─┬─┬─┐
                //│  │  │  │
                //├─┼─┼─┤
                //│  │至│  │
                //├─┼─┼─┤
                //│  │Ａ│  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 0, 1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcA.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //┌─┬─┬─┐
                //│  │Ａ│  │
                //├─┼─┼─┤
                //│  │至│  │
                //├─┼─┼─┤
                //│  │  │  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 0, -1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcA.AddElement(masu);
                }
            }

            return srcA;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｂ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻昇(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcB = new SySet_Default<SyElement>("戻昇の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //┌─┬─┬─┐
                //│  │  │  │
                //├─┼─┼─┤
                //│  │至│  │
                //├─┼─┼─┤
                //│Ｂ│  │  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 1, 1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcB.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //┌─┬─┬─┐
                //│  │  │Ｂ│
                //├─┼─┼─┤
                //│  │至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, -1, -1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcB.AddElement(masu);
                }
            }

            return srcB;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｃ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻射(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcC = new SySet_Default<SyElement>("戻射の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //┌─┬─┬─┐
                //│  │  │  │
                //├─┼─┼─┤
                //│Ｃ│至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 1, 0);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcC.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //┌─┬─┬─┐
                //│  │  │  │
                //├─┼─┼─┤
                //│　│至│Ｃ│
                //├─┼─┼─┤
                //│　│  │  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, -1, 0);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcC.AddElement(masu);
                }
            }

            return srcC;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｄ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻沈(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcD = new SySet_Default<SyElement>("戻沈の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //┌─┬─┬─┐
                //│Ｄ│  │  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.沈);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcD.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //┌─┬─┬─┐
                //│　│  │  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│  │Ｄ│
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, pside, Hogaku.沈);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcD.AddElement(masu);
                }
            }

            return srcD;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｅ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻引(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcE = new SySet_Default<SyElement>("戻引の移動元");


            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //┌─┬─┬─┐
                //│　│Ｅ│  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 0, -1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcE.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //┌─┬─┬─┐
                //│　│  │  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│Ｅ│  │
                //└─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 0, 1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcE.AddElement(masu);
                }
            }


            return srcE;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｆ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻降(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcF = new SySet_Default<SyElement>("戻降の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //  ┌─┬─┬─┐
                //  │  │  │Ｆ│
                //  ├─┼─┼─┤
                //  │  │至│  │
                //  ├─┼─┼─┤
                //  │  │  │  │
                //  └─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, -1, -1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcF.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //  ┌─┬─┬─┐
                //  │  │  │  │
                //  ├─┼─┼─┤
                //  │  │至│  │
                //  ├─┼─┼─┤
                //  │Ｆ│  │  │
                //  └─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 1, 1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcF.AddElement(masu);
                }
            }

            return srcF;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｇ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻滑(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcG = new SySet_Default<SyElement>("戻滑の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //  ┌─┬─┬─┐
                //  │  │  │  │
                //  ├─┼─┼─┤
                //  │  │至│Ｇ│
                //  ├─┼─┼─┤
                //  │  │  │  │
                //  └─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, -1, 0);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcG.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //  ┌─┬─┬─┐
                //  │  │  │  │
                //  ├─┼─┼─┤
                //  │Ｇ│至│  │
                //  ├─┼─┼─┤
                //  │  │  │  │
                //  └─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 1, 0);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcG.AddElement(masu);
                }
            }

            return srcG;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｈ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcIppo_戻浮(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcH = new SySet_Default<SyElement>("戻浮の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //  ┌─┬─┬─┐
                //  │  │  │  │
                //  ├─┼─┼─┤
                //  │  │至│  │
                //  ├─┼─┼─┤
                //  │  │  │Ｈ│
                //  └─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, -1, 1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcH.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //  ┌─┬─┬─┐
                //  │Ｈ│  │  │
                //  ├─┼─┼─┤
                //  │  │至│  │
                //  ├─┼─┼─┤
                //  │  │  │  │
                //  └─┴─┴─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 1, -1);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcH.AddElement(masu);
                }
            }

            return srcH;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｉ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKeimatobi_戻跳(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcI = new SySet_Default<SyElement>("戻跳の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //┌─┐　┌─┐
                //│Ｉ│　│  │
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│　│  │  │
                //└─┘　└─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 1, -2);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcI.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //┌─┐　┌─┐
                //│  │　│  │
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│  │　│Ｉ│
                //└─┘　└─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, -1, 2);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcI.AddElement(masu);
                }
            }

            return srcI;
        }


        /// <summary>
        /// ************************************************************************************************************************
        /// (至)升を指定することで、王の(自)升の候補（Ｊ方向）全てを返します。
        /// ************************************************************************************************************************
        /// </summary>
        /// <param name="pside"></param>
        /// <param name="masu_itaru"></param>
        /// <returns></returns>
        public static SySet<SyElement> SrcKeimatobi_戻駆(Playerside pside, SyElement masu_itaru)
        {
            SySet_Default<SyElement> srcJ = new SySet_Default<SyElement>("戻駆の移動元");

            if (Playerside.P2 == pside)
            {
                //******************************
                // △後手
                //******************************
                //┌─┐　┌─┐
                //│  │　│Ｊ│
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│  │  │  │
                //└─┘　└─┘

                //----------
                // 競合駒マス(pre masu)
                //----------
                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, -1, -2);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcJ.AddElement(masu);
                }
            }
            else
            {
                //******************************
                // ▲先手
                //******************************
                //┌─┐　┌─┐
                //│  │　│  │
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│　│至│  │
                //├─┼─┼─┤
                //│　│  │  │
                //├─┼─┼─┤
                //│Ｊ│　│  │
                //└─┘　└─┘

                SyElement masu = Conv_Masu.BanjoOffset( masu_itaru, 1, 2);
                if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu))
                {
                    srcJ.AddElement(masu);
                }
            }

            return srcJ;
        }


        /// <summary>
        /// 設定用。
        /// </summary>
        /// <param name="masuOrigin"></param>
        /// <param name="pside"></param>
        /// <param name="muki"></param>
        /// <param name="nagasa"></param>
        /// <returns></returns>
        private static SySet_DirectedSegment<SyElement> Create_Masus_DirectedSegment(
            SyElement masuOrigin,
            Playerside pside, Hogaku muki, int nagasa
            )
        {

            SySet_DirectedSegment<SyElement> thisObj = new SySet_DirectedSegment<SyElement>("有向線分",pside, muki, new List<SyElement>());

            if (Masu_Honshogi.IsErrorBasho( masuOrigin))
            {
                goto gt_EndMethod;
            }

            int dSuji = 0;
            int dDan = 0;

            switch ((Hogaku)thisObj.Hogaku)//先手の場合
            {
                case Hogaku.上: dDan = -1; break;
                case Hogaku.昇: dSuji = -1; dDan = -1; break;
                case Hogaku.射: dSuji = -1; break;
                case Hogaku.沈: dSuji = -1; dDan = +1; break;
                case Hogaku.引: dDan = +1; break;
                case Hogaku.降: dSuji = +1; dDan = +1; break;
                case Hogaku.滑: dSuji = +1; break;
                case Hogaku.浮: dSuji = +1; dDan = -1; break;
            }

            if ((Playerside)thisObj.Playerside == Playerside.P2)
            {
                dSuji *= -1;
                dDan *= -1;
            }

            SyElement masu1 = masuOrigin;

            if (Okiba.ShogiBan == Conv_Masu.ToOkiba(masu1))
            {
                thisObj.AddElement(masu1);//１直線に遷移しているので、マス番号は重複しないはず。


                for (int i = 0; i < nagasa - 1; i++)//長さは、原点を含んだ長さのはず。原点はもう追加済みなので-1します。
                {
                    // 遷移
                    masu1 = (SyElement)Conv_Masu.BanjoOffset( masu1, dSuji, dDan);

                    if (Okiba.ShogiBan != Conv_Masu.ToOkiba(masu1))
                    {
                        //>>>>> 範囲外になった。
                        break;
                    }

                    thisObj.AddElement(masu1);//１直線に遷移しているので、マス番号は重複しないはず。
                }
            }

        gt_EndMethod:
            return thisObj;
        }

    }

}
